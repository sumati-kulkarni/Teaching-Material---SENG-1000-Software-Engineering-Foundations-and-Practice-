print('[map()]...........................................')
# map(function_to_apply, list_of_inputs)
items = [1, 2, 3, 4, 5, -1, -3, -2, -4, -6, 7, 6]
print("items=",items)
r1 = map(lambda x: x**2, items)
print("r1=",r1)
l1 = list(r1)
print("l1=",l1)
print('..................................................')

print('[map()]...........................................')
# map(function_to_apply, list_of_inputs)
items = [1, 2, 3, 4, 5, -1, -3, -2, -4, -6, 7, 6]
print("items=",items)
def f1(x):
	return x**2
	
r2 = map(f1, items)
print("r2=",r2)
l2 = list(r2)
print("l2=",l2)
print('..................................................')

print()

print('[filter()]........................................')
# As the name suggests, filter creates a list of elements 
# for which a function returns true. 
# filter(function_to_apply, list_of_inputs)

items = [1, 2, 3, 4, 5, -1, -3, -2, -4, -6, 7, 6]
print("items=",items)
r3 = map(lambda x: x >=0, items)
print("r3=",r3)
l3 = list(r3)
print("l3=",l3)
r3 = filter(lambda x: x >=0, items)
print("r3=",r3)
l3 = list(r3)
print("l3=",l3)
print('..................................................')
print('[filter()]........................................')
# As the name suggests, filter creates a list of elements 
# for which a function returns true. 
# filter(function_to_apply, list_of_inputs)

items = [1, 2, 3, 4, 5, -1, -3, -2, -4, -6, 7, 6]
print("items=",items)

def f2(x):
	if x >=0:
		return True
	return False

r4 = map(f2, items)
print("r4=",r4)
l4 = list(r4)
print("l4=",l4)
r4 = filter(f2, items)
print("r4=",r4)
l4 = list(r4)
print("l4=",l4)
print('..................................................')


print()

print('[reduce()]........................................')
# Reduce is a really useful function for performing some computation 
# on a list and returning the result. It applies a rolling computation 
# to sequential pairs of values in a list. For example, if you wanted 
# to compute the product of a list of integers.
# reduce(function_to_apply, list_of_inputs)

#NOTE This :-)
from functools import reduce

items = [1, 2, 3, 4, 5]
print("items=",items)
r5 = reduce(lambda x,y: x * y, items)
print("r5=",r5)

p = 1
for i in items:
    p = p * i
print('p=',p)

print('..................................................')
print('[reduce()]........................................')
# Reduce is a really useful function for performing some computation 
# on a list and returning the result. It applies a rolling computation 
# to sequential pairs of values in a list. For example, if you wanted 
# to compute the product of a list of integers.
# reduce(function_to_apply, list_of_inputs)

items = [1, 2, 3, 4, 5]
print("items=",items)

def f3(x,y):
	return x * y

r6 = reduce(f3, items)
print("r6=",r6)
print('..................................................')

