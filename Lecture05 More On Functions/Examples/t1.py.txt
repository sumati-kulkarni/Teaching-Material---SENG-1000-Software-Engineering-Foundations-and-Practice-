# The map(aFunction, aSequence) function applies a passed-in function 
# to each item in an iterable object and returns a list containing all 
# the function call results

items = [1, 2, 3, 4, 5]
def sqr(x): return x ** 2

# We passed in a user-defined function applied to each item in the list. 
# map calls sqr on each list item and collects all the return values into 
# a new list.
r = list(map(sqr, items))
print(r)


print('.........................')
# Because map expects a function to be passed in, it also happens to be one 
# of the places where lambda routinely appears:

r = list(map((lambda x: x **2), items))
print(r)


print('.........................')
# While we still use lamda as a aFunction, 
# we can have a list of functions as aSequence:

def square(x): 
	return (x**2)
def cube(x):   
	return (x**3)

funcs = [square, cube]
for i in range(5):
	# map calls lambda on each list item, which is a function
    r = list(map(lambda x: x(i), funcs))
    print(r)
	
print('.........................')
# As the name suggests filter extracts each element in the sequence for which 
# the function returns True.
l = list(range(-5,5))
r = list( filter((lambda x: x < 0), range(-5,5)))
print(l)
print(r)

# This function is roughly equivalent to a for loop, but it is built-in and fast:
r =[]
for x in range(-5, 5):
	if x < 0:
		r.append(x)

# Here is another use case for filter(): finding intersection of two lists:
a = [1,2,3,5,7,9]
b = [2,3,5,6,7,8]
print( filter(lambda x: x in a, b) ) # prints out [2, 3, 5, 7]
		
print('.........................')
# The reduce function is a little less obvious in its intent. This function 
# reduces a list to a single value by combining elements via a supplied function.

# The reduce is in the functools in Python 3.0. It is more complex. It accepts an 
# iterator to process, but it's not an iterator itself. It returns a single result:

from functools import reduce
# adds all the elements
r = reduce( (lambda x, y: x + y), [1, 2, 3, 4] )
print(r)

# almost like a factorial
r = reduce( (lambda x, y: x * y), [1, 2, 3, 4] )
print(r)

# Here's the for loop version of the first of these calls, with the multiplication 
# hardcoded inside the loop:
L = [1, 2, 3, 4]
r = L[0]
for x in L[1:]:
	r = r * x
print(r)